{"version":3,"sources":["logo.svg","Loop.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["useStyles","makeStyles","oneLoopTurendOff","display","flexDirection","height","width","backgroundImage","margin","marginLeft","marginRight","alignContent","border","oneLoopTurenOn","backgroundColor","buttonsDiv","justifyContent","marginTop","marginBottom","Loop","name","turnOn","turnOff","path","activeLoops","useState","isTurnOn","setIsTurnOn","classes","handleChange","useEffect","length","className","Button","onClick","disabled","loopsDiv","flexWrap","title","fontSize","mainButtonsDiv","mainDiv","alignItems","textAlign","background","activeLoopsDiv","App","setActiveLoops","isPlaying","setIsPlaying","activeLoop","delay","currentTime","setTimeout","src","newLoop","Audio","load","play","loop","temp","slice","push","currentUrl","window","location","href","index","findIndex","audio","split","pause","prev","splice","stopLoops","forEach","allLoops","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7182bad4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddAlertIcon from \"@material-ui/icons/AddAlert\";\r\nimport MusicOffIcon from \"@material-ui/icons/MusicOff\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\n\r\nconst useStyles = makeStyles({\r\n  oneLoopTurendOff: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"20vh\",\r\n    width: \"28%\",\r\n    backgroundImage: \"radial-gradient(#ff1744, #9b0000);\",\r\n    margin: \"5px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    alignContent: \"center\",\r\n    border: \"4px solid red\",\r\n  },\r\n  oneLoopTurenOn: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"20vh\",\r\n    width: \"28%\",\r\n    backgroundImage: \"radial-gradient(lime, green);\",\r\n    backgroundColor: \"#c1d5e0\",\r\n    margin: \"5px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    alignContent: \"center\",\r\n    border: \"4px solid green\",\r\n  },\r\n  buttonsDiv: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    marginTop: \"auto\",\r\n    marginBottom: \"auto\",\r\n  },\r\n});\r\n\r\nfunction Loop({name,turnOn,turnOff,path,activeLoops}) {\r\n  const [isTurnOn, setIsTurnOn] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  //Change the state according to the user's choice\r\n  const handleChange = () => {\r\n    if (isTurnOn) {\r\n      setIsTurnOn(false);\r\n      turnOff(path);\r\n    } else {\r\n      setIsTurnOn(true);\r\n      turnOn(path);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (activeLoops.length === 0) {\r\n      setIsTurnOn(false);\r\n    }\r\n  }, [activeLoops.length]);\r\n\r\n  return (\r\n    <>\r\n      {isTurnOn ? (\r\n        <div className={classes.oneLoopTurenOn}>\r\n          {<h3>{name}</h3>}\r\n          <div className={classes.buttonsDiv}>\r\n            <Button onClick={handleChange} disabled>\r\n              Turn On <MusicNoteIcon />\r\n            </Button>\r\n            <Button onClick={handleChange}>\r\n              Turn Off <MusicOffIcon />\r\n            </Button>{\" \"}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className={classes.oneLoopTurendOff}>\r\n          {<h3>{name}</h3>}\r\n          <div className={classes.buttonsDiv}>\r\n            <Button onClick={handleChange}>\r\n              Turn On <MusicNoteIcon />\r\n            </Button>\r\n            <Button onClick={handleChange} disabled>\r\n              Turn Off <MusicOffIcon />\r\n            </Button>{\" \"}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loop\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Loop from './Loop';\r\nimport allLoops from './loops.json';\r\nimport { useState } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\n\r\nconst useStyles = makeStyles({\r\n  loopsDiv: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  title: {\r\n    fontSize: \"1.7em\",\r\n    display: \"inline-block\",\r\n  },\r\n  mainButtonsDiv: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    marginTop: \"auto\",\r\n    marginBottom: \"auto\",\r\n    height:'3vh'\r\n  },\r\n  mainDiv: {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n    marginBottom: 0,\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    background: '#90a4ae',\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  activeLoopsDiv: {\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n    width: \"30%\",\r\n    height: \"10vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n});\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [activeLoops, setActiveLoops] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  //Run the loop at the right moment if there is a loop playing\r\n  const turnOn = (path) => {\r\n    if (isPlaying) {\r\n      const activeLoop = activeLoops[0];\r\n      let delay = 8000 - activeLoops[0].currentTime * 1000;\r\n      setTimeout(() => {\r\n        if(activeLoops[0]?.src == activeLoop?.src){\r\n          let newLoop = new Audio(path);\r\n          newLoop.load();\r\n          newLoop.play();\r\n          newLoop.loop = true;\r\n          let temp = activeLoops.slice();\r\n          temp.push(newLoop);\r\n          setActiveLoops(temp);\r\n        }\r\n        return;\r\n      }, delay);\r\n    } else {\r\n      let newLoop = new Audio(path);\r\n      let temp = activeLoops.slice();\r\n      temp.push(newLoop);\r\n      setActiveLoops(temp);\r\n    }\r\n  };\r\n\r\n  //Stop the selected loop immediately\r\n  const turnOff = (path) => {\r\n    const { href: currentUrl } = window.location;\r\n    let index = activeLoops.findIndex((audio) => {\r\n      return \"./\" + audio.src.split(currentUrl)[1] === path\r\n    });\r\n    if (index !== -1) {\r\n      activeLoops[index].pause();\r\n      activeLoops[index].currentTime = 0;\r\n      if (activeLoops.length === 1) {\r\n        setIsPlaying(false);\r\n      }\r\n      setActiveLoops((prev)=>{\r\n        prev.splice(index,1);\r\n        return prev;\r\n      })\r\n    }\r\n  };\r\n\r\n  //Start to play the selected loops for the first time\r\n  const playLoops = () => {\r\n    if (!isPlaying) {\r\n      setIsPlaying(true);\r\n      activeLoops.forEach((loop) => {\r\n        loop.play();\r\n        loop.loop = true;\r\n      });\r\n    }\r\n  };\r\n\r\n  //Stop all the loops immediately\r\n  const stopLoops = () => {\r\n    setIsPlaying(false);\r\n    activeLoops.forEach((loop) => {\r\n      loop.pause();\r\n      loop.currentTime = 0;\r\n    });\r\n    setActiveLoops([]);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.mainDiv}>\r\n      <div className={classes.title}>Loop machine - Itay Sasson</div>\r\n      <div className={classes.mainButtonsDiv}>\r\n        {activeLoops.length > 0 ? (\r\n          isPlaying ? (\r\n            <Button disabled>\r\n              Play <PlayArrowIcon />\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={playLoops}>\r\n              Play <PlayArrowIcon />\r\n            </Button>\r\n          )\r\n        ) : (\r\n          <Button disabled>\r\n            Play <PlayArrowIcon />\r\n          </Button>\r\n        )}\r\n        {activeLoops.length > 0 ? (\r\n          isPlaying ? (\r\n            <Button onClick={stopLoops}>\r\n              Stop <StopIcon />\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={stopLoops} disabled>\r\n              Stop <StopIcon />\r\n            </Button>\r\n          )\r\n        ) : (\r\n          <Button onClick={stopLoops} disabled>\r\n            Stop <StopIcon />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className={classes.activeLoopsDiv}>\r\n        {activeLoops.length === 0 && <h3>Choose a loop</h3>}\r\n      </div>\r\n      <div className={classes.loopsDiv}>\r\n        {allLoops.map((loop) => {\r\n          return (\r\n            <Loop\r\n              turnOn={turnOn}\r\n              turnOff={turnOff}\r\n              name={loop.name}\r\n              path={loop.path}\r\n              activeLoops={activeLoops}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}